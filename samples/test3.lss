
(define task_one
  (lambda ()
    (let ((sens_val (read-from-sensor 0)))
      (if (= sens_val #t)
	  (if (= sens_val #t)
	      (set-engine-on/off "01" 'off))
	  (task_one)))))

(define setup
  (lambda (x y)
    (wait y)
    (setup-sensor 0 'switch 'boolean)
    (set-engine-direction "01" 'forward) 
    (let ((z (+ x (read-from-sensor 0))))
      (set-engine-speed "01" z))))

(define task_zero
  (lambda ()
    (setup (+ 1 4) 100)
    (set-engine-on/off "01" 'on)
    (task_one)))

;; SUBPROJECT - CONVERSION ALGORITHMS
;; step one - yank out the tasks
;; step two - while/loop - ify
;; step three - register allocation
;; step four - function removal
                                        